//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\Wenjie\OneDrive\MasterThesis\VisionBasedCompiler\BioCompiler\Compiler\Syntax.g by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class SyntaxParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, ID=9, 
		INT=10, COMMENT=11, SPACE=12;
	public const int
		RULE_program = 0, RULE_stat = 1, RULE_droplet = 2, RULE_moving = 3, RULE_spliting = 4;
	public static readonly string[] ruleNames = {
		"program", "stat", "droplet", "moving", "spliting"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "'droplet('", "','", "')'", "';'", "'Move'", "'('", "'Split'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "ID", "INT", "COMMENT", 
		"SPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Syntax.g"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SyntaxParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SyntaxParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SyntaxParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SyntaxParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5 || _la==ID) {
				{
				{
				State = 10;
				stat();
				}
				}
				State = 15;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 16;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MovingContext moving() {
			return GetRuleContext<MovingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SplitingContext spliting() {
			return GetRuleContext<SplitingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropletContext droplet() {
			return GetRuleContext<DropletContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 2, RULE_stat);
		try {
			State = 21;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 18;
				moving();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 19;
				spliting();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 20;
				droplet();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropletContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SyntaxParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(SyntaxParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(SyntaxParser.INT, i);
		}
		public DropletContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_droplet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDroplet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropletContext droplet() {
		DropletContext _localctx = new DropletContext(Context, State);
		EnterRule(_localctx, 4, RULE_droplet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			Match(ID);
			State = 24;
			Match(T__0);
			State = 25;
			Match(T__1);
			State = 26;
			Match(INT);
			State = 27;
			Match(T__2);
			State = 28;
			Match(INT);
			State = 29;
			Match(T__2);
			State = 30;
			Match(INT);
			State = 31;
			Match(T__2);
			State = 32;
			Match(INT);
			State = 33;
			Match(T__3);
			State = 34;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MovingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SyntaxParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(SyntaxParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(SyntaxParser.INT, i);
		}
		public MovingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moving; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoving(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MovingContext moving() {
		MovingContext _localctx = new MovingContext(Context, State);
		EnterRule(_localctx, 6, RULE_moving);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			Match(T__5);
			State = 37;
			Match(T__6);
			State = 38;
			Match(ID);
			State = 39;
			Match(T__2);
			State = 40;
			Match(INT);
			State = 41;
			Match(T__2);
			State = 42;
			Match(INT);
			State = 43;
			Match(T__3);
			State = 44;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SplitingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(SyntaxParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(SyntaxParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(SyntaxParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(SyntaxParser.INT, i);
		}
		public SplitingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spliting; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpliting(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SplitingContext spliting() {
		SplitingContext _localctx = new SplitingContext(Context, State);
		EnterRule(_localctx, 8, RULE_spliting);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			Match(ID);
			State = 47;
			Match(T__2);
			State = 48;
			Match(ID);
			State = 49;
			Match(T__0);
			State = 50;
			Match(T__7);
			State = 51;
			Match(T__6);
			State = 52;
			Match(ID);
			State = 53;
			Match(T__2);
			State = 54;
			Match(INT);
			State = 55;
			Match(T__2);
			State = 56;
			Match(INT);
			State = 57;
			Match(T__2);
			State = 58;
			Match(INT);
			State = 59;
			Match(T__2);
			State = 60;
			Match(INT);
			State = 61;
			Match(T__3);
			State = 62;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,12,65,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,1,0,5,0,12,8,0,10,0,
		12,0,15,9,0,1,0,1,0,1,1,1,1,1,1,3,1,22,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		0,0,5,0,2,4,6,8,0,0,62,0,13,1,0,0,0,2,21,1,0,0,0,4,23,1,0,0,0,6,36,1,0,
		0,0,8,46,1,0,0,0,10,12,3,2,1,0,11,10,1,0,0,0,12,15,1,0,0,0,13,11,1,0,0,
		0,13,14,1,0,0,0,14,16,1,0,0,0,15,13,1,0,0,0,16,17,5,0,0,1,17,1,1,0,0,0,
		18,22,3,6,3,0,19,22,3,8,4,0,20,22,3,4,2,0,21,18,1,0,0,0,21,19,1,0,0,0,
		21,20,1,0,0,0,22,3,1,0,0,0,23,24,5,9,0,0,24,25,5,1,0,0,25,26,5,2,0,0,26,
		27,5,10,0,0,27,28,5,3,0,0,28,29,5,10,0,0,29,30,5,3,0,0,30,31,5,10,0,0,
		31,32,5,3,0,0,32,33,5,10,0,0,33,34,5,4,0,0,34,35,5,5,0,0,35,5,1,0,0,0,
		36,37,5,6,0,0,37,38,5,7,0,0,38,39,5,9,0,0,39,40,5,3,0,0,40,41,5,10,0,0,
		41,42,5,3,0,0,42,43,5,10,0,0,43,44,5,4,0,0,44,45,5,5,0,0,45,7,1,0,0,0,
		46,47,5,9,0,0,47,48,5,3,0,0,48,49,5,9,0,0,49,50,5,1,0,0,50,51,5,8,0,0,
		51,52,5,7,0,0,52,53,5,9,0,0,53,54,5,3,0,0,54,55,5,10,0,0,55,56,5,3,0,0,
		56,57,5,10,0,0,57,58,5,3,0,0,58,59,5,10,0,0,59,60,5,3,0,0,60,61,5,10,0,
		0,61,62,5,4,0,0,62,63,5,5,0,0,63,9,1,0,0,0,2,13,21
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
