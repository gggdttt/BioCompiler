//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\Wenjie\OneDrive\MasterThesis\VisionBasedCompiler\BioCompiler\Compiler\Syntax.g by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class SyntaxLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, ID=13, DIGIT=14, INT=15, FLOAT=16, COMMENT=17, 
		SPACE=18;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "ID", "DIGIT", "INT", "FLOAT", "COMMENT", "SPACE"
	};


	public SyntaxLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SyntaxLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'Droplet'", "';'", "'input('", "','", "')'", "'move'", "'('", "'merge'", 
		"'split'", "'mix'", "'output'", "'store'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "ID", "DIGIT", "INT", "FLOAT", "COMMENT", "SPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Syntax.g"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SyntaxLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,18,125,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,
		1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,
		6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,
		1,12,5,12,97,8,12,10,12,12,12,100,9,12,1,13,1,13,1,14,4,14,105,8,14,11,
		14,12,14,106,1,15,1,15,1,15,1,15,1,16,1,16,5,16,115,8,16,10,16,12,16,118,
		9,16,1,16,1,16,1,17,1,17,1,17,1,17,0,0,18,1,1,3,2,5,3,7,4,9,5,11,6,13,
		7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,1,0,
		4,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,10,10,13,13,
		3,0,9,10,13,13,32,32,127,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
		0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
		1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
		0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,1,37,1,0,0,0,3,45,1,0,0,0,5,47,
		1,0,0,0,7,54,1,0,0,0,9,56,1,0,0,0,11,58,1,0,0,0,13,63,1,0,0,0,15,65,1,
		0,0,0,17,71,1,0,0,0,19,77,1,0,0,0,21,81,1,0,0,0,23,88,1,0,0,0,25,94,1,
		0,0,0,27,101,1,0,0,0,29,104,1,0,0,0,31,108,1,0,0,0,33,112,1,0,0,0,35,121,
		1,0,0,0,37,38,5,68,0,0,38,39,5,114,0,0,39,40,5,111,0,0,40,41,5,112,0,0,
		41,42,5,108,0,0,42,43,5,101,0,0,43,44,5,116,0,0,44,2,1,0,0,0,45,46,5,59,
		0,0,46,4,1,0,0,0,47,48,5,105,0,0,48,49,5,110,0,0,49,50,5,112,0,0,50,51,
		5,117,0,0,51,52,5,116,0,0,52,53,5,40,0,0,53,6,1,0,0,0,54,55,5,44,0,0,55,
		8,1,0,0,0,56,57,5,41,0,0,57,10,1,0,0,0,58,59,5,109,0,0,59,60,5,111,0,0,
		60,61,5,118,0,0,61,62,5,101,0,0,62,12,1,0,0,0,63,64,5,40,0,0,64,14,1,0,
		0,0,65,66,5,109,0,0,66,67,5,101,0,0,67,68,5,114,0,0,68,69,5,103,0,0,69,
		70,5,101,0,0,70,16,1,0,0,0,71,72,5,115,0,0,72,73,5,112,0,0,73,74,5,108,
		0,0,74,75,5,105,0,0,75,76,5,116,0,0,76,18,1,0,0,0,77,78,5,109,0,0,78,79,
		5,105,0,0,79,80,5,120,0,0,80,20,1,0,0,0,81,82,5,111,0,0,82,83,5,117,0,
		0,83,84,5,116,0,0,84,85,5,112,0,0,85,86,5,117,0,0,86,87,5,116,0,0,87,22,
		1,0,0,0,88,89,5,115,0,0,89,90,5,116,0,0,90,91,5,111,0,0,91,92,5,114,0,
		0,92,93,5,101,0,0,93,24,1,0,0,0,94,98,7,0,0,0,95,97,7,1,0,0,96,95,1,0,
		0,0,97,100,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,26,1,0,0,0,100,98,1,
		0,0,0,101,102,2,48,57,0,102,28,1,0,0,0,103,105,3,27,13,0,104,103,1,0,0,
		0,105,106,1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,30,1,0,0,0,108,109,
		3,29,14,0,109,110,5,46,0,0,110,111,3,29,14,0,111,32,1,0,0,0,112,116,5,
		35,0,0,113,115,8,2,0,0,114,113,1,0,0,0,115,118,1,0,0,0,116,114,1,0,0,0,
		116,117,1,0,0,0,117,119,1,0,0,0,118,116,1,0,0,0,119,120,6,16,0,0,120,34,
		1,0,0,0,121,122,7,3,0,0,122,123,1,0,0,0,123,124,6,17,0,0,124,36,1,0,0,
		0,4,0,98,106,116,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
