//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\Wenjie\OneDrive\MasterThesis\VisionBasedCompiler\BioCompiler\Visitors\Syntax.g by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class SyntaxParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, ID=16, INT=17, 
		FLOAT=18, COMMENT=19, SPACE=20;
	public const int
		RULE_program = 0, RULE_stat = 1, RULE_repeat = 2, RULE_declaration = 3, 
		RULE_input = 4, RULE_move = 5, RULE_merge = 6, RULE_split = 7, RULE_mix = 8, 
		RULE_output = 9, RULE_store = 10;
	public static readonly string[] ruleNames = {
		"program", "stat", "repeat", "declaration", "input", "move", "merge", 
		"split", "mix", "output", "store"
	};

	private static readonly string[] _LiteralNames = {
		null, "'repeat'", "'times{'", "'}'", "'droplet'", "';'", "'input('", "','", 
		"')'", "'move'", "'('", "'merge'", "'split'", "'mix'", "'output'", "'store'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "ID", "INT", "FLOAT", "COMMENT", "SPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Syntax.g"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SyntaxParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SyntaxParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SyntaxParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SyntaxParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 64082L) != 0) {
				{
				{
				State = 22;
				stat();
				}
				}
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 28;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InputContext input() {
			return GetRuleContext<InputContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MoveContext move() {
			return GetRuleContext<MoveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MergeContext merge() {
			return GetRuleContext<MergeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SplitContext split() {
			return GetRuleContext<SplitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MixContext mix() {
			return GetRuleContext<MixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputContext output() {
			return GetRuleContext<OutputContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoreContext store() {
			return GetRuleContext<StoreContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 2, RULE_stat);
		try {
			State = 39;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 30;
				repeat();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 31;
				input();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 32;
				declaration();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 4);
				{
				State = 33;
				move();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 5);
				{
				State = 34;
				merge();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 6);
				{
				State = 35;
				split();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 7);
				{
				State = 36;
				mix();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 8);
				{
				State = 37;
				output();
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 9);
				{
				State = 38;
				store();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SyntaxParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public RepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatContext repeat() {
		RepeatContext _localctx = new RepeatContext(Context, State);
		EnterRule(_localctx, 4, RULE_repeat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			Match(T__0);
			State = 42;
			Match(INT);
			State = 43;
			Match(T__1);
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 64082L) != 0) {
				{
				{
				State = 44;
				stat();
				}
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 50;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SyntaxParser.ID, 0); }
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			Match(T__3);
			State = 53;
			Match(ID);
			State = 54;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SyntaxParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(SyntaxParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(SyntaxParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SyntaxParser.FLOAT, 0); }
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 8, RULE_input);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			Match(T__5);
			State = 57;
			Match(ID);
			State = 58;
			Match(T__6);
			State = 59;
			Match(INT);
			State = 60;
			Match(T__6);
			State = 61;
			Match(INT);
			State = 62;
			Match(T__6);
			State = 63;
			Match(FLOAT);
			State = 64;
			Match(T__7);
			State = 65;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SyntaxParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(SyntaxParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(SyntaxParser.INT, i);
		}
		public MoveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_move; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMove(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoveContext move() {
		MoveContext _localctx = new MoveContext(Context, State);
		EnterRule(_localctx, 10, RULE_move);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			Match(T__8);
			State = 68;
			Match(T__9);
			State = 69;
			Match(ID);
			State = 70;
			Match(T__6);
			State = 71;
			Match(INT);
			State = 72;
			Match(T__6);
			State = 73;
			Match(INT);
			State = 74;
			Match(T__7);
			State = 75;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MergeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(SyntaxParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(SyntaxParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(SyntaxParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(SyntaxParser.INT, i);
		}
		public MergeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MergeContext merge() {
		MergeContext _localctx = new MergeContext(Context, State);
		EnterRule(_localctx, 12, RULE_merge);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			Match(T__10);
			State = 78;
			Match(T__9);
			State = 79;
			Match(ID);
			State = 80;
			Match(T__6);
			State = 81;
			Match(ID);
			State = 82;
			Match(T__6);
			State = 83;
			Match(ID);
			State = 84;
			Match(T__6);
			State = 85;
			Match(INT);
			State = 86;
			Match(T__6);
			State = 87;
			Match(INT);
			State = 88;
			Match(T__7);
			State = 89;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SplitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(SyntaxParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(SyntaxParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(SyntaxParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(SyntaxParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SyntaxParser.FLOAT, 0); }
		public SplitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_split; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSplit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SplitContext split() {
		SplitContext _localctx = new SplitContext(Context, State);
		EnterRule(_localctx, 14, RULE_split);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(T__11);
			State = 92;
			Match(T__9);
			State = 93;
			Match(ID);
			State = 94;
			Match(T__6);
			State = 95;
			Match(ID);
			State = 96;
			Match(T__6);
			State = 97;
			Match(ID);
			State = 98;
			Match(T__6);
			State = 99;
			Match(INT);
			State = 100;
			Match(T__6);
			State = 101;
			Match(INT);
			State = 102;
			Match(T__6);
			State = 103;
			Match(INT);
			State = 104;
			Match(T__6);
			State = 105;
			Match(INT);
			State = 106;
			Match(T__6);
			State = 107;
			Match(FLOAT);
			State = 108;
			Match(T__7);
			State = 109;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SyntaxParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(SyntaxParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(SyntaxParser.INT, i);
		}
		public MixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MixContext mix() {
		MixContext _localctx = new MixContext(Context, State);
		EnterRule(_localctx, 16, RULE_mix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(T__12);
			State = 112;
			Match(T__9);
			State = 113;
			Match(ID);
			State = 114;
			Match(T__6);
			State = 115;
			Match(INT);
			State = 116;
			Match(T__6);
			State = 117;
			Match(INT);
			State = 118;
			Match(T__6);
			State = 119;
			Match(INT);
			State = 120;
			Match(T__6);
			State = 121;
			Match(INT);
			State = 122;
			Match(T__6);
			State = 123;
			Match(INT);
			State = 124;
			Match(T__7);
			State = 125;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SyntaxParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(SyntaxParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(SyntaxParser.INT, i);
		}
		public OutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputContext output() {
		OutputContext _localctx = new OutputContext(Context, State);
		EnterRule(_localctx, 18, RULE_output);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			Match(T__13);
			State = 128;
			Match(T__9);
			State = 129;
			Match(ID);
			State = 130;
			Match(T__6);
			State = 131;
			Match(INT);
			State = 132;
			Match(T__6);
			State = 133;
			Match(INT);
			State = 134;
			Match(T__7);
			State = 135;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SyntaxParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(SyntaxParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(SyntaxParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SyntaxParser.FLOAT, 0); }
		public StoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_store; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISyntaxVisitor<TResult> typedVisitor = visitor as ISyntaxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStore(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoreContext store() {
		StoreContext _localctx = new StoreContext(Context, State);
		EnterRule(_localctx, 20, RULE_store);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			Match(T__14);
			State = 138;
			Match(T__9);
			State = 139;
			Match(ID);
			State = 140;
			Match(T__6);
			State = 141;
			Match(INT);
			State = 142;
			Match(T__6);
			State = 143;
			Match(INT);
			State = 144;
			Match(T__6);
			State = 145;
			Match(FLOAT);
			State = 146;
			Match(T__7);
			State = 147;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,20,150,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,5,0,24,8,0,10,0,12,0,27,9,0,1,0,1,0,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,40,8,1,1,2,1,2,1,2,1,2,5,2,46,
		8,2,10,2,12,2,49,9,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,
		9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,0,0,11,0,2,4,6,8,10,12,14,16,18,20,0,0,148,0,25,1,0,0,0,2,
		39,1,0,0,0,4,41,1,0,0,0,6,52,1,0,0,0,8,56,1,0,0,0,10,67,1,0,0,0,12,77,
		1,0,0,0,14,91,1,0,0,0,16,111,1,0,0,0,18,127,1,0,0,0,20,137,1,0,0,0,22,
		24,3,2,1,0,23,22,1,0,0,0,24,27,1,0,0,0,25,23,1,0,0,0,25,26,1,0,0,0,26,
		28,1,0,0,0,27,25,1,0,0,0,28,29,5,0,0,1,29,1,1,0,0,0,30,40,3,4,2,0,31,40,
		3,8,4,0,32,40,3,6,3,0,33,40,3,10,5,0,34,40,3,12,6,0,35,40,3,14,7,0,36,
		40,3,16,8,0,37,40,3,18,9,0,38,40,3,20,10,0,39,30,1,0,0,0,39,31,1,0,0,0,
		39,32,1,0,0,0,39,33,1,0,0,0,39,34,1,0,0,0,39,35,1,0,0,0,39,36,1,0,0,0,
		39,37,1,0,0,0,39,38,1,0,0,0,40,3,1,0,0,0,41,42,5,1,0,0,42,43,5,17,0,0,
		43,47,5,2,0,0,44,46,3,2,1,0,45,44,1,0,0,0,46,49,1,0,0,0,47,45,1,0,0,0,
		47,48,1,0,0,0,48,50,1,0,0,0,49,47,1,0,0,0,50,51,5,3,0,0,51,5,1,0,0,0,52,
		53,5,4,0,0,53,54,5,16,0,0,54,55,5,5,0,0,55,7,1,0,0,0,56,57,5,6,0,0,57,
		58,5,16,0,0,58,59,5,7,0,0,59,60,5,17,0,0,60,61,5,7,0,0,61,62,5,17,0,0,
		62,63,5,7,0,0,63,64,5,18,0,0,64,65,5,8,0,0,65,66,5,5,0,0,66,9,1,0,0,0,
		67,68,5,9,0,0,68,69,5,10,0,0,69,70,5,16,0,0,70,71,5,7,0,0,71,72,5,17,0,
		0,72,73,5,7,0,0,73,74,5,17,0,0,74,75,5,8,0,0,75,76,5,5,0,0,76,11,1,0,0,
		0,77,78,5,11,0,0,78,79,5,10,0,0,79,80,5,16,0,0,80,81,5,7,0,0,81,82,5,16,
		0,0,82,83,5,7,0,0,83,84,5,16,0,0,84,85,5,7,0,0,85,86,5,17,0,0,86,87,5,
		7,0,0,87,88,5,17,0,0,88,89,5,8,0,0,89,90,5,5,0,0,90,13,1,0,0,0,91,92,5,
		12,0,0,92,93,5,10,0,0,93,94,5,16,0,0,94,95,5,7,0,0,95,96,5,16,0,0,96,97,
		5,7,0,0,97,98,5,16,0,0,98,99,5,7,0,0,99,100,5,17,0,0,100,101,5,7,0,0,101,
		102,5,17,0,0,102,103,5,7,0,0,103,104,5,17,0,0,104,105,5,7,0,0,105,106,
		5,17,0,0,106,107,5,7,0,0,107,108,5,18,0,0,108,109,5,8,0,0,109,110,5,5,
		0,0,110,15,1,0,0,0,111,112,5,13,0,0,112,113,5,10,0,0,113,114,5,16,0,0,
		114,115,5,7,0,0,115,116,5,17,0,0,116,117,5,7,0,0,117,118,5,17,0,0,118,
		119,5,7,0,0,119,120,5,17,0,0,120,121,5,7,0,0,121,122,5,17,0,0,122,123,
		5,7,0,0,123,124,5,17,0,0,124,125,5,8,0,0,125,126,5,5,0,0,126,17,1,0,0,
		0,127,128,5,14,0,0,128,129,5,10,0,0,129,130,5,16,0,0,130,131,5,7,0,0,131,
		132,5,17,0,0,132,133,5,7,0,0,133,134,5,17,0,0,134,135,5,8,0,0,135,136,
		5,5,0,0,136,19,1,0,0,0,137,138,5,15,0,0,138,139,5,10,0,0,139,140,5,16,
		0,0,140,141,5,7,0,0,141,142,5,17,0,0,142,143,5,7,0,0,143,144,5,17,0,0,
		144,145,5,7,0,0,145,146,5,18,0,0,146,147,5,8,0,0,147,148,5,5,0,0,148,21,
		1,0,0,0,3,25,39,47
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
